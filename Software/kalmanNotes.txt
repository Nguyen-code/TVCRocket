kalman filter notes:

Reference code:
https://github.com/adafruit/Adafruit_AHRS/blob/master/src/Adafruit_AHRS_NXPFusion.cpp

EKF but python:
https://github.com/diegoavillegasg/IMU-GNSS-Lidar-sensor-fusion-using-Extended-Kalman-Filter-for-State-Estimation/blob/master/es_ekf.py#L172
https://github.com/diegoavillegasg/IMU-GNSS-Lidar-sensor-fusion-using-Extended-Kalman-Filter-for-State-Estimation/blob/master/es_ekf.py
https://github.com/cyscgzx33/Self_Driving_Car_State_Estimation/blob/master/state_estimate_final_proj/es_ekf.py

Kalman python but sim only:
https://github.com/tottaway/kalman-filters/blob/master/kalman.py

C++ EKF
https://github.com/rsasaki0109/kalman_filter_localization/blob/master/include/kalman_filter_localization/ekf.hpp

EKF but for drones
https://github.com/PX4/ecl

Apparently good theory
https://www.kalmanfilter.net/kalman1d.html

More notes and papers
https://www.researchgate.net/publication/260725857_Vehicle_speed_estimation_using_GPSRISS_Reduced_Inertial_Sensor_System
https://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/
https://www.mathworks.com/matlabcentral/fileexchange/56652-particle-sigma-point-and-kalman-filters
http://www.anuncommonlab.com/articles/how-kalman-filters-work/

Embedded lib w some great info at the top
https://github.com/pronenewbits/Embedded_EKF_Library/blob/master/ekf_engl/ekf.cpp
https://github.com/pronenewbits/Arduino_AHRS_System/blob/master/ahrs_ekf/ahrs_ekf.ino
https://github.com/pronenewbits/Arduino_AHRS_System/blob/master/ahrs_ekf/ekf.cpp

ACTUAL KALMAN FILTER IMPLEMENTATION FOR ARDUINO (USE THIS)
https://github.com/DanInvents/Flight-Controller
and
https://github.com/TKJElectronics/KalmanFilter/blob/master/examples/MPU6050/MPU6050.ino
https://github.com/FlyTheThings/uNavINS <---- THIS IS PERFECT FOR APPLICATION

more general sim ref stuff
https://github.com/Zentrik/TVC

BEST RESOURCE
https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python

Notes on Torque based controllers
https://youtu.be/J2ACQsmkPJs?t=411

Quaternion stuff
https://github.com/alexdada555/Rocket-Landing-Control/blob/master/ACS6116%20Assignment%20-%20Rocket%20Landing%20Control%20With%20MPC.pdf

State is represented by a matrix x
Each variable has a mean of mu and a variance of SD^2 - variance=uncertainty

Best estimate is x hat sub k - aka mean of readings
Covariance matrix is P sub k - represents the degree of correlation between the ith and jth state variable

Looking at current state at t=k-1, next state at time K can be mapped by a matrix F sub k, which moves every point to a new estimate

Update covariance matrix by using identity cov(Ax) = AcovAt

U sub k is the control vector - represents what the guidance system is doing to the system
B sub k is the control matrix - represents mapping of the control vector to the system

Add expanded covariance of Q sub k to the covariance matrix

"the new best estimate is a prediction made from previous best estimate, plus a correction for known external influences.

And the new uncertainty is predicted from the old uncertainty, with some additional uncertainty from the environment."

Sensors tell us something indirect about the state - they produce a set of readings
Sensors are modelled by a matrix, H sub k, which is used to map the readings to the state or covariance matrix

Covariance of the sensor uncertainty (i.e. noise) is the matrix R sub k, mean equal to the reading we observed which is a vector, z sub k

If we multiply H sub k and Z sub k, we get the intersection between uncertainty and the sensor reading, which gives us a nice best guess

K is kalman gain matrix that